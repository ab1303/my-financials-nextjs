// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoleEnumType {
  user
  admin
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          RoleEnumType? @default(user)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  accounts   Account[]
  sessions   Session[]
  Individual Individual[]
  Business   Business[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BusinessEnumType {
  BANK
  PHILANTHROPY
}

enum BeneficiaryEnumType {
  INDIVIDUAL
  BUSINESS
}

model Individual {
  id           String  @id @default(cuid())
  name         String
  firstName    String?
  lastName     String?
  relationship String?
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Business

model Business {
  id             String            @id @default(cuid())
  name           String
  addressLine    String?
  streetAddress  String?
  suburb         String?
  postcode       Int?
  state          String?
  type           BusinessEnumType?
  PaymentHistory Payment[]
  BankInterest   BankInterest[]
  ZakatPayment   ZakatPayment[]
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String        @id @default(cuid())
  datePaid       DateTime
  amount         Decimal       @db.Money
  business       Business?     @relation(fields: [businessId], references: [id])
  businessId     String?
  BankInterest   BankInterest? @relation(fields: [bankInterestId], references: [id])
  bankInterestId String?
}

model BankInterest {
  id         String       @id @default(cuid())
  month      Int
  year       Int
  amountDue  Decimal      @db.Money
  bank       Business     @relation(fields: [bankId], references: [id])
  bankId     String
  calendar   CalendarYear @relation(fields: [calendarId], references: [id])
  calendarId String
  payments   Payment[]
}

// Zakat
model Zakat {
  id         String         @id @default(cuid())
  calendar   CalendarYear   @relation(fields: [calendarId], references: [id])
  calendarId String         @unique
  amountDue  Decimal        @db.Money
  payments   ZakatPayment[]
}

model ZakatPayment {
  id              String              @id @default(cuid())
  datePaid        DateTime
  amount          Decimal             @db.Money
  beneficiaryType BeneficiaryEnumType
  business        Business?           @relation(fields: [businessId], references: [id])
  businessId      String?
  Zakat           Zakat               @relation(fields: [zakatId], references: [id])
  zakatId         String
}

// Calendar Year

enum CalendarEnumType {
  ZAKAT
  ANNUAL
  FISCAL
}

model CalendarYear {
  id           String            @id @default(cuid())
  description  String
  fromYear     Int
  fromMonth    Int
  toYear       Int
  toMonth      Int
  type         CalendarEnumType?
  Zakat        Zakat[]
  BankInterest BankInterest[]
}
